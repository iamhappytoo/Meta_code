# We don’t provide test cases in this language yet. Please write your code below, and don’t forget to test edge cases!
#node=c(value,curr_addr,next_addr)
#list here mimick the memory and the nodes in the list are linked as the linked list
reverse <- function(head){
  node=c(NaN,NaN,head[2])#node.next=head
  curr=head
  while(!is.na(curr[1])){
    start=curr
    if(curr[1]%%2==0){
      prev=curr
      while(!is.na(curr[1])&(curr[1]%%2==0)){
        curr=llist[[curr[3]]] ##actually means the next one.
      }
    }
    if(start[2]!=curr[2]){##means there are really the even number sublist
      end=curr
      llist[[prev[2]]][3]=getlistreverse(start,end)
    }
  }
  return(llist[[node[3]]])
}
getlistreverse<- function(start,end){
  ##start is inclusive, and end is exclusive
  prev=end
  curr=start
  while(curr[2]!=end[2]){
    next=llist[[curr[3]]]
    llist[[curr[2]]][3]=prev[2]
    prev=curr
    curr=llist[[curr[3]]]
  }
  return(prev)
}
llist=NULL
llist[[1]]=c(1,1,2)
llist[[2]]=c(2,2,3)
llist[[3]]=c(8,3,4)
llist[[4]]=c(9,4,5)
llist[[5]]=c(12,5,6)
llist[[6]]=c(16,6,7)
output=reverse(llist[[1]])
